<img src="http://wow.sapegin.me/image/3G3M423k0y09/git-friendly.jpg" width="100%" style="width:100%" />

A collection of shell scripts for making **pulling**, **branching**, and **merging** with git fast and painless.

Git sometimes requires typing 2 or 3 commands just to execute something basic like fetching new code. git-friendly adds some new commands - pull, push, branch, merge - which are just simple wrappers around git commands and some post-pull hooks.

Bonus niceties:
* *push* also copies a GitHub compare URL to your clipboard for easy pasting
* *pull* will run commands like @bundle install@, @npm install@, @yarn install@, @bower install@ and @composer install@ if applicable
* *branch* will track remote branches if available
* relevant commands stash/pop changes as needed
* less time fighting git = more time actually doing work

h2. Install

Run this one-liner, which will checkout the latest code & unpack the scripts into @/usr/local/bin@
If you don't have write access to @/usr/local/bin@ you'll need to run this using 'sudo'

pre. bash < <( curl https://raw.githubusercontent.com/jamiew/git-friendly/master/install.sh)

You can also provide a directory to install as an argument, e.g. @/usr/bin@ instead of @/usr/local/bin@:

pre. bash < <( curl https://raw.githubusercontent.com/jamiew/git-friendly/master/install.sh)

h2. Advanced Install

Checkout the code:

pre. git clone git://github.com/jamiew/git-friendly.git ~/dev/git-friendly

Then add this directory to your PATH:

pre. export PATH=~/dev/git-friendly:$PATH

Add the above to your @~/.bash_profile@ or @~/.bashrc@ so that it runs each time you launch a new terminal.

h2. Usage

You now have some awesome new commands available: *pull*, *push*, *branch*, *merge*

<img src="http://wow.sapegin.me/2T0B1e2h0U46/pull.png" alt="" title="Rolling in style" />

Example session:

pre. $ pull
$ branch awesomeness
$ echo "BUMP" >> README
$ git commit -a -m "Righteous bump"
$ branch master
$ merge awesomeness
$ push



h2. Commands

| *pull* | Stash any local changes, pull from remote using rebase, updates submodules, pop your stash, then run @bundle install@, @npm install@, @yarn install@, @bower install@ or @composer install@ if necessary. |
| *push* | Push your changes to the remote + copy a compare URL like "http://github.com/jamiew/git-friendly/compare/e96033...5daed4":http://github.com/jamiew/git-friendly/compare/e96033...5daed4 to your clipboard (works on Mac and Linux) |
| *branch&nbsp;[name]* | Switch branches or create new local branch if it doesn't exist. Intelligently sets up remote branch tracking so you can just type 'git pull' and not always 'git pull origin newbranch'. If no argument specified will list all local and remote branches.  |
| *merge&nbsp;[name]* | Merge the specified branch into the current branch. Rebases first if the branch is local-only |


h2. Configuration

You can disable @bundle install@, @npm install@, @yarn install@, @bower install@ and @composer install@ for the @pull@ command by defining environmental variables:

* @GIT_FRIENDLY_NO_BUNDLE@: disables @bundle install@
* @GIT_FRIENDLY_NO_NPM@: disables @npm install@
* @GIT_FRIENDLY_NO_YARN@: disables @yarn install@
* @GIT_FRIENDLY_NO_BOWER@: disables @bower install@
* @GIT_FRIENDLY_NO_COMPOSER@: disables @composer install@

For example, add this line to your @~/.bash_profile@ to disable @bundle install@:

pre. export GIT_FRIENDLY_NO_BUNDLE=true


h2. Bonus: Pimp Your Configs

We strongly recommend editing your global `~/.gitconfig` and adding chill features like ANSI color, command aliases (e.g. "git st" instead of "git status"), automatic remote tracking and more. Check out "this sample ~/.gitconfig":https://gist.github.com/668161 to get started.

We also recommend adding the current git branch to your Terminal prompt (PS1) or you'll quickly lose your place -- here is a "pimp_prompt() bash function":https://gist.github.com/790086 which goes in your @~/.bash_profile@ or @~/.bashrc@, then type @source ~/.bashrc@ to reload.

<img src="http://wow.sapegin.me/image/0Z1C1U00281j/pimped-prompt.jpg" alt="" title="You could be this cool" />


h2. License

Code released under an MIT license.

Fork away, do whatever. Pull requests welcome.

Following the practices of "Rubinius":http://www.programblings.com/2008/04/15/rubinius-for-the-layman-part-2-how-rubinius-is-friendly/, anyone who submits an accepted patch is granted a commit bit (write access to the repository).

Following the practices of "FAT Lab":http://fffff.at, anyone who submits an accepted patch is granted credit and attribution bits.


h2. Contributors

* "Jamie Wilkinson":http://jamiedubs.com ("@jamiew":http://github.com/jamiew)
* "Ethan Bruning":https://github.com/ebruning ("@ebruning":https://github.com/ebruning)
* "John Manoogian III":http://jm3.net ("@jm3":http://github.com/jm3)
* "CJ Lazell":http://cj.io/ ("@cj":http://github.com/cj)
* "Maciej Małecki":http://twitter.com/mmalecki ("@mmalecki":https://github.com/mmalecki)
* "Ezekiel Templin":http://blog.ezkl.org/ ("@ezkl":https://github.com/ezkl)
* "Artem Sapegin":http://sapegin.me/ ("@sapegin":https://github.com/sapegin)
* "Harold Dennison":http://hdennison.com/ ("@hdennison":https://github.com/hdennison)
* "Andriy Prokopenko":http://andriyprokopenko.com/ ("@sleepyboy":https://github.com/sleepyboy)
* Ben Zörb ("@bezoerb":https://github.com/bezoerb)
* "Rafael Corrêa Gomes":https://rafaelstz.github.io/ ("@rafaelstz":https://github.com/rafaelstz)

