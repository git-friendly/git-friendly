#!/bin/bash
#
# Usage: branch [branchname]
# Usage: branch [-D] [-d] [branchname]
# Usage: branch -
#
#
# Switch to an existing branch, create a new local-only branch or delete a local or remote branch.
# Adds remote tracking if a remote branch with the same name exists,
# in any remote, preferring the "origin" remote if there are duplicates.
#
# Executing without arguments prints all local & remote branches
#

# Abort if this isn't a git repository
git rev-parse --is-inside-work-tree >/dev/null || exit $?

remote="origin"
branch=$1
delete=

# If deleting a branch, stash the flag and branch name to use later
if [ "$1" == "-d" ] || [ "$1" == "-D" ]; then
  delete=$1
  branch=$2
fi

# If no branch specified (or -r), just print usage plus list of branches
if [ -z $branch ] || [ $branch == "-r" ]; then
  echo -e "\nSwitch to or create a new branch:"
  echo -e "  $(basename $0) [name]"
  echo -e "\nSwitch to the previous branch:"
  echo -e "  $(basename $0) -"
  echo -e "\nDelete branch:"
  echo -e "  $(basename $0) [-D] [-d] <name>"
  echo -e "\nCurrent branches: "
  branches="git branch -vv"
  if [ "$1" == "-r" ]; then
    branches="$branches -r"
  fi
  $branches
  echo
  exit 0
fi

# Switch to the previous branch
if [ "$branch" == "-" ]; then
  git checkout -
  exit 0
fi

# Delete branch
if [ "$delete" ]; then
  echo "üíÄ  Removing local branch..."
  git branch $delete $branch
  exit 0
fi

# Otherwise we're either switching to an existing branch or creating a branch
local_branch_exists=$(git branch --no-color | egrep " $branch\$")
remote_branch_exists=$(git branch -r --no-color | egrep " $remote/$branch\$")
remotes=($(git remote))
remotes_with_branch=()
origin_has_branch=

for remote in "${remotes[@]}"; do
  remote_branch_exists=$(git branch -r --no-color | egrep " $remote/$branch\$")
  if [ "$remote_branch_exists" ]; then
    remotes_with_branch=("${remotes_with_branch[@]}" "$remote")
    if [ "$remote" = "origin" ]; then
      origin_has_branch=1
    fi
  fi
done

# Try to match the local branch name to a remote branch (across multiple remotes)
if [ ${#remotes_with_branch[@]} -gt 0 ]; then
  if [ "$origin_has_branch" = "1" ]; then
    # Default to using 'origin' remote if it has a matching branch
    remote=origin
  else
    # Otherwise, use the first matching remote branch alphabetically (index 0)
    remote=${remotes[0]}
  fi
  remote_branch_exists="$remote/$branch"
fi

# If local branch exists already, just switch to it
if [ -n "$local_branch_exists" ] && [ ! "$local_branch_exists" == '' ]; then
  echo "üëì  Switching to existing local branch..."
  git checkout $branch

  # Track remote branch if not already
  if [ -n "$remote_branch_exists" ] && [ ! "$remote_branch_exists" == '' ]; then
    tracking=$(git branch -vv | grep "*" | awk '{ print $4 '})
    # echo "Remote branch exists. Local branch is tracking: $tracking"
    if [[ ! "$tracking" =~ "$remote" ]]; then
      echo "‚öíÔ∏è  Your local branch is not tracking the corresponding remote branch, fixing..."
      git branch --set-upstream-to $branch $remote/$branch
    fi
  fi

# If remote exists, create a local branch that tracks the remote
elif [ -n "$remote_branch_exists" ] && [ ! "$remote_branch_exists" == '' ]; then
  echo "üì°  Tracking existing remote branch '$remote_branch_exists'..."
  git checkout -b $branch --track $remote/$branch

# Otherwise create a new local branch
else
  echo "‚úèÔ∏è  Creating new local branch..."
  git checkout -b $branch --no-track
fi

exit 0
